# ClaudeOnRails Conventions Configuration

Rails_Conventions:
  Naming_Conventions:
    Models:
      - Singular, CamelCase (User, OrderItem)
      - Descriptive and domain-specific
      - Avoid generic names (Data, Info)
      - Use modules for namespacing
    
    Controllers:
      - Plural, CamelCase with Controller suffix
      - RESTful actions preferred
      - Namespace API controllers
      - Use concerns for shared behavior
    
    Database:
      - Tables: plural, snake_case
      - Columns: snake_case
      - Foreign keys: model_id
      - Indexes: descriptive names
    
    Routes:
      - RESTful resources
      - Shallow nesting (max 1 level)
      - Use member/collection for custom
      - Namespace APIs and admin

  File_Organization:
    App_Structure:
      Models:
        - app/models/
        - Concerns in app/models/concerns/
        - One class per file
        - Group related models
      
      Controllers:
        - app/controllers/
        - API in app/controllers/api/
        - Admin in app/controllers/admin/
        - Concerns for shared logic
      
      Services:
        - app/services/
        - Group by domain
        - Clear naming (VerbNoun)
        - Single responsibility
      
      Jobs:
        - app/jobs/
        - Descriptive names
        - Group by function
        - Include error handling

  Code_Style:
    Ruby_Style:
      - 2 spaces indentation
      - No trailing whitespace
      - Max 80-100 chars per line
      - Consistent quotes (prefer single)
    
    Rails_Specific:
      - Use Rails helpers
      - Prefer symbols for options
      - Use strong parameters
      - Follow Rails idioms
    
    Method_Guidelines:
      - Short methods (< 10 lines)
      - Single responsibility
      - Descriptive names
      - Early returns

  Database_Conventions:
    Migrations:
      Structure:
        - Descriptive names
        - Reversible when possible
        - Add indexes for foreign keys
        - Include down migrations
      
      Best_Practices:
        - One change per migration
        - Test rollbacks
        - Avoid data migrations
        - Use SQL for complex changes
    
    Schema:
      Design:
        - Normalize appropriately
        - Use appropriate types
        - Add database constraints
        - Consider performance
      
      Indexes:
        - Foreign key columns
        - Columns used in WHERE
        - Composite indexes
        - Unique constraints

  Testing_Conventions:
    Structure:
      Spec_Files:
        - Mirror app structure
        - _spec.rb suffix
        - Group by type
        - Clear descriptions
      
      Test_Organization:
        - Use contexts
        - One assertion per test
        - Test behavior not implementation
        - Use factories not fixtures
    
    Naming:
      Examples:
        - Start with verb
        - Describe behavior
        - Use "when" for context
        - Be specific
      
      Contexts:
        - Group related tests
        - Set up common state
        - Use shared examples
        - Avoid deep nesting

  API_Conventions:
    Endpoints:
      RESTful_Design:
        - Use HTTP verbs correctly
        - Plural resource names
        - Nested resources sparingly
        - Version from start
      
      Naming:
        - Lowercase
        - Hyphens not underscores
        - Clear and descriptive
        - Consistent patterns
    
    Responses:
      Format:
        - JSON by default
        - Consistent structure
        - Include metadata
        - Pagination info
      
      Status_Codes:
        - 200 OK for GET
        - 201 Created for POST
        - 204 No Content for DELETE
        - 422 for validation errors

Git_Conventions:
  Commits:
    Message_Format:
      - Present tense
      - Imperative mood
      - 50 char summary
      - Detailed body if needed
    
    Types:
      - feat: New feature
      - fix: Bug fix
      - docs: Documentation
      - style: Formatting
      - refactor: Code restructuring
      - test: Adding tests
      - chore: Maintenance
  
  Branching:
    Strategy:
      - main/master for production
      - develop for integration
      - feature/* for features
      - hotfix/* for urgent fixes
    
    Naming:
      - Descriptive names
      - Include ticket number
      - Use hyphens
      - Keep it short

Documentation_Standards:
  Code_Comments:
    When_To_Comment:
      - Complex algorithms
      - Business logic explanation
      - TODO items
      - API documentation
    
    Style:
      - Above the code
      - Explain why, not what
      - Keep updated
      - Use YARD format
  
  README:
    Required_Sections:
      - Project description
      - Setup instructions
      - Running tests
      - Deployment guide
      - Contributing guidelines
    
    Keep_Updated:
      - Version requirements
      - Environment variables
      - Dependencies
      - Architecture decisions