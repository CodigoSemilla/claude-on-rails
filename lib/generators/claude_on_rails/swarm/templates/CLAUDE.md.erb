# <%= Rails.application.class.module_parent_name %> Rails Development with ClaudeOnRails

This project uses ClaudeOnRails to create an intelligent swarm of AI agents specialized in different aspects of Rails development.

## Project Overview

- **Application**: <%= Rails.application.class.module_parent_name %>
- **Rails Version**: <%= Rails.version %>
- **Ruby Version**: <%= RUBY_VERSION %>
- **Type**: <%= @api_only ? 'API-only' : 'Full-stack Rails application' %>
- **Test Framework**: <%= @test_framework || 'Not detected' %>
<% if @has_graphql -%>
- **GraphQL**: Enabled
<% end -%>

## How to Use

Simply describe what you want to build or fix, and the swarm will automatically coordinate the implementation:

```bash
# Start the swarm
claude-swarm orchestrate

# Then just describe your task
claude "Add user authentication with email confirmation"
claude "Optimize the dashboard queries that are running slowly"
claude "Create an API endpoint for mobile app integration"
```

## Swarm Architecture

The following specialized agents work together to implement your requests:

- **Architect**: Coordinates all development and makes high-level decisions
- **Models**: Handles ActiveRecord models, migrations, and database design
- **Controllers**: Manages request handling, routing, and controller logic
<% unless @api_only -%>
- **Views**: Creates and maintains views, layouts, and partials
<% end -%>
<% if @api_only -%>
- **API**: Designs RESTful endpoints and handles serialization
<% end -%>
<% if @has_graphql -%>
- **GraphQL**: Manages GraphQL schemas, types, and resolvers
<% end -%>
<% if @has_turbo -%>
- **Stimulus**: Implements interactive features with Stimulus controllers
<% end -%>
- **Services**: Extracts business logic into service objects
- **Jobs**: Handles background processing and async tasks
<% unless @skip_tests -%>
- **Tests**: Ensures comprehensive test coverage with <%= @test_framework %>
<% end -%>
- **DevOps**: Manages deployment and production configurations

## Project Conventions

### Code Style
- Follow Rails conventions and best practices
- Use RuboCop for Ruby style enforcement
- Prefer clarity over cleverness
- Write self-documenting code

### Testing
<% if @test_framework == 'RSpec' -%>
- RSpec for all tests
- Factory Bot for test data
- Request specs for API endpoints
- System specs for user interactions
<% else -%>
- Minitest for all tests
- Fixtures or factories for test data
- Integration tests for user flows
- Unit tests for models and services
<% end -%>

### Git Workflow
- Feature branches for new work
- Descriptive commit messages
- PR reviews before merging
- Keep main branch deployable

## Custom Patterns

Add your project-specific patterns and conventions here:

```yaml
# Example: Custom service object pattern
Services:
  Pattern: Command pattern with Result objects
  Location: app/services/
  Naming: VerbNoun (e.g., CreateOrder, SendEmail)
  Testing: Unit tests with mocked dependencies
```

## Notes

- This configuration was generated by ClaudeOnRails
- Customize agent prompts in `.claude-on-rails/prompts/`
- Update this file with project-specific conventions
- The swarm learns from your codebase patterns